{
    "type": "py",
    "tokens": [
        "def",
        " ",
        "annotate_loop",
        "(",
        "tokens",
        ":",
        " ",
        "list",
        "[",
        "str",
        "]",
        ",",
        " ",
        "tags",
        ":",
        " ",
        "list",
        "[",
        "str",
        "]",
        ",",
        " ",
        "fill_copies",
        "=",
        "True",
        ")",
        ":",
        "\n    ",
        "\"\"\"Successively ask for input to annotate unknown tokens.\n\n    ## Parameters\n    - tokens\n    - tags\n    - fill_copies (bool): Tag all occurrences of a token at once.\n\n    ## Returns\n    - tags_new (list[str]): New list of tags\n    \"\"\"",
        "\n    ",
        "max_length",
        " ",
        "=",
        " ",
        "20",
        "\n    ",
        "tags_new",
        " ",
        "=",
        " ",
        "tags",
        ".",
        "copy",
        "(",
        ")"
    ],
    "tags": [
        "kwd",
        "wsp",
        "func",
        "br_op",
        "var",
        "punct",
        "wsp",
        "kwd",
        "br_op",
        "kwd",
        "br_cl",
        "punct",
        "wsp",
        "var",
        "punct",
        "wsp",
        "kwd",
        "br_op",
        "kwd",
        "br_cl",
        "punct",
        "wsp",
        "var",
        "assign",
        "kwd",
        "br_cl",
        "punct",
        "wsp",
        "str",
        "wsp",
        "var",
        "wsp",
        "assign",
        "wsp",
        "num",
        "wsp",
        "var",
        "wsp",
        "assign",
        "wsp",
        "var",
        "punct",
        "func",
        "br_op",
        "br_cl"
    ],
    "changed": [
        true,
        false,
        false,
        false,
        false,
        false,
        false,
        true,
        false,
        true,
        false,
        false,
        false,
        true,
        false,
        false,
        true,
        false,
        true,
        false,
        false,
        false,
        false,
        false,
        true,
        false,
        false,
        false,
        true,
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        true,
        false,
        false,
        false,
        false
    ]
}